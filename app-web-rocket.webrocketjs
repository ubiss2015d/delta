var my_lat = 65.0104156;
var my_lon = 25.4775413;
var asd = my_lat;

var my_entity = Tundra.scene.createLocalEntity(["Name", "Placeable", "Billboard"]);

// Changes XML to JSON
function xmlToJson(xml) 
{
    
    // Create the return object
    var obj = {};
 
    if (xml.nodeType == 1) { // element
        // do attributes
        if (xml.attributes.length > 0) {
        obj["@attributes"] = {};
            for (var j = 0; j < xml.attributes.length; j++) {
                var attribute = xml.attributes.item(j);
                obj["@attributes"][attribute.nodeName] = attribute.nodeValue;
            }
        }
    } else if (xml.nodeType == 3) { // text
        obj = xml.nodeValue;
    }
 
    // do children
    if (xml.hasChildNodes()) {
        for(var i = 0; i < xml.childNodes.length; i++) {
            var item = xml.childNodes.item(i);
            var nodeName = item.nodeName;
            if (typeof(obj[nodeName]) == "undefined") {
                obj[nodeName] = xmlToJson(item);
            } else {
                if (typeof(obj[nodeName].push) == "undefined") {
                    var old = obj[nodeName];
                    obj[nodeName] = [];
                    obj[nodeName].push(old);
                }
                obj[nodeName].push(xmlToJson(item));
            }
        }
    }
    return obj;
};


function parseCoord(str)
{
    var coordArray = str.split(" ");
    var coord = {};
    var lon = parseFloat(coordArray[0]);
    var lat = parseFloat(coordArray[1]);
 
    if (!isNaN(lon))
        coord.lon = lon;
 
    if (!isNaN(lat))
        coord.lat = lat;
 
    return coord;
}



var WebRocketApplication = IApplication.$extend(
{
    __init__ : function()
    {
        this.$super("OULUBUSVIZ");

        this.timing = new AsyncHelper(this.name, this);
        this.state =
        {
            camera : {}
        };

        // Monitor active camera change
        var activeCamera = Tundra.renderer.activeCameraEntity();
        if (activeCamera != null && activeCamera.camera != null)
            this.onActiveCameraChanged(activeCamera.camera);

        this.subscribeEvent(Tundra.renderer.onActiveCameraChanged(this, this.onActiveCameraChanged));

        // Run RTS camera application
        this.rts = {};
        this.rts.ent = Tundra.client.runApplication("RTS", "meshmoon-applications://meshmoon/rts-camera/rts-camera.webrocketjs");
        this.rts.ent.script.onScriptStarted(function(entity, component, scriptAsset, app) {
            this.rts.app = app;
        }.bind(this));

        // You can turn on debugging to see more internals
        //Tundra.plugins.meshmoonGeo.config.debug = true; // and/or
        //Tundra.plugins.meshmoonGeo.config.debugVolume = true;
        
        /* Run Meshmoon GEO at Oulu city center
           You can change this coordinate to be anywhere in the world
           and Meshmoon GEO will do its best to visualize the location. */
        Tundra.plugins.meshmoonGeo.start({
            lon : my_lon,
            lat : my_lat
        });

        // Setup default environment
        Tundra.plugins.meshmoonGeo.setupEnvironment();
        
        /*
        var pos = Tundra.plugins.meshmoonGeo.coordinates.latLonToWorldPosition(my_lat, my_lon);
        
        
        my_entity.name = "Test_billboard";
        
        my_entity.placeable.setPosition(new THREE.Vector3(pos.x, 300.0, pos.z));
        //my_entity.placeable.setScale(new THREE.Vector3(1, 1, 1));
        my_entity.billboard.materialRef = "https://cdn2.colorlib.com/wp/wp-content/uploads/sites/2/2014/02/Olympic-logo.png";
        my_entity.billboard.height = 200.0;
        my_entity.billboard.width = 300.0;
        */
        
        
        //Tundra.frame.onPreRender(this, this.onPreRender)
        
        /*var transfer = $.ajax({
            type : 'GET',
            dataType : 'json',
            url : 'http://data.itsfactory.fi/journeys/api/1/vehicle-activity'
        });*/
        
        
        
        var transfer = Tundra.asset.requestAsset("https://dl.dropboxusercontent.com/u/3127934/oulubusviz/tre_example.json", "Text");
        
        //console.log(transfer);
        if (transfer != null) {
            transfer.onCompleted(this, this.onAssetTransferCompleted);
        } 
        else 
        {
            console.log("transfer == null");
        }
        
        
        
        /*
        var pos = Tundra.plugins.meshmoonGeo.coordinates.latLonToWorldPosition(my_lat, my_lon);
        
        my_entity.name = "Test_billboard";
        
        my_entity.placeable.setPosition(new THREE.Vector3(pos.x, 300.0, pos.z));
        //my_entity.placeable.setScale(new THREE.Vector3(1, 1, 1));
        my_entity.billboard.materialRef = "https://cdn2.colorlib.com/wp/wp-content/uploads/sites/2/2014/02/Olympic-logo.png";
        my_entity.billboard.height = 200.0;
        my_entity.billboard.width = 300.0;
        
        Tundra.frame.onPreRender(this, this.onPreRender);
        */
    },
    
    onAssetTransferCompleted: function(asset)
    {
        var items = asset.data.body;
        //console.log(asset);
        //console.log(items);
        
        var pos = Tundra.plugins.meshmoonGeo.coordinates.latLonToWorldPosition(my_lat, my_lon);
        
        /*
        my_entity.name = "Test_billboard";
        
        my_entity.placeable.setPosition(new THREE.Vector3(pos.x, 300.0, pos.z));
        my_entity.billboard.materialRef = "https://cdn2.colorlib.com/wp/wp-content/uploads/sites/2/2014/02/Olympic-logo.png";
        my_entity.billboard.height = 200.0;
        my_entity.billboard.width = 300.0;
        
        Tundra.frame.onPreRender(this, this.onPreRender);
        */
        
        
 
        
        if (items)
        {
            //var items = obj;
            for (var i = 0; i < items.length; i++)
            {
                var oneItem = items[i];
                //if (typeof oneItem["georss:point"] != "object")
                //    continue;
 
                var coord = oneItem["monitoredVehicleJourney"]["vehicleLocation"];
                //console.log(coord);
                
                var pos = Tundra.plugins.meshmoonGeo.coordinates.latLonToWorldPosition(parseInt(coord.latitude), parseInt(coord.longitude));
                //console.log(pos);
 
                var my_entity = Tundra.scene.createLocalEntity(["Name", "Billboard", "Placeable"]);
 
                my_entity.name = "ent_"+i;
        
                my_entity.placeable.setPosition(new THREE.Vector3(pos.x, 150.0, pos.z));
                my_entity.billboard.materialRef = "https://cdn2.colorlib.com/wp/wp-content/uploads/sites/2/2014/02/Olympic-logo.png";
                my_entity.billboard.height = 20.0;
                my_entity.billboard.width = 30.0;
                
                console.log(my_entity);
 
                /*
                entity.mesh.meshRef = "http://meshmoon.eu.scenes.1.s3.amazonaws.com/ligas-401829/test-layer/sphere/sphere.mesh";
                entity.mesh.materialRefs = [
                    "http://meshmoon.eu.scenes.1.s3.amazonaws.com/ligas-401829/test-layer/sphere/sphere_yellow.material"
                    ];
 
                entity.placeable.setPosition(new THREE.Vector3(pos.x, 150, pos.z));
                entity.placeable.setScale(new THREE.Vector3(100, 100, 100));
 
                this.data[entity.id] = {
                    title : oneItem.title["#text"],
                    link  : oneItem.link["#text"],
                    entId : entity.id
                };
                */
            }
    
        }
        
    },
    
    onPreRender : function() 
    {
        var poz = Tundra.plugins.meshmoonGeo.coordinates.latLonToWorldPosition(asd, 25.466228);
        asd += 0.0000001;
        my_entity.component("Placeable").setPosition(poz.x, 150.0, poz.z);
    },

    onActiveCameraChanged : function(activeCameraComponent, prevCameraComponent)
    {
        var cameraName = (activeCameraComponent.parentEntity ? activeCameraComponent.parentEntity.name : "");
        if (cameraName === "" || !cameraName)
            return;

        // Adjust far plane to handle big scene for Meshmoon GEO functionality
        this.camera = activeCameraComponent.parentEntity;
        this.camera.camera.farPlane = 1000000;

        this.log.debug("Active camera changed", this.camera.name);

        // If RTS camera execute configuration
        if (this.camera.name === "MeshmoonRtsCamera" && this.state.camera.configured === undefined)
        {
            this.state.camera.configured = true;
            this.timing.async("rts.config", function() {
                this.camera.exec(EntityAction.Local, "SetRotation", { x : -40, y : 0, z : 0 });
                this.camera.exec(EntityAction.Local, "SetDistance", 3000);
                this.camera.exec(EntityAction.Local, "SetMinDistance", 200);
                this.camera.exec(EntityAction.Local, "SetMaxDistance", this.camera.camera.farPlane * 0.4);
            }, 100);
        }
    },

    /** 
        Script destroy/unload handler. Called automatically 
        by the framework when the application is closed.
    */
    onScriptDestroyed : function()
    {
        Tundra.plugins.meshmoonGeo.stop();
    }
});

// Start the application by instantiating it
var webRocketApplication = new WebRocketApplication();
