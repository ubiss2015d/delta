// begin thang
var updated_time = 0;
highlighted_bus_stops = [];
// end thang

// begin samuli

// Tampere coordinates

var my_lat = 61.4981503;
var my_lon = 23.7610254;


// Oulu coordinates
/*
var my_lat = 65.002916;
var my_lon = 25.465702;
*/
var asd = my_lat;
var my_entity;


// end samuli

// begin san
// The bus stops that are displayed at the moment
var highlighted_bus_stops;
// Bus position update interval in milliseconds
var siri_update_interval = 1000;
// The last time of bus position update in milliseconds
var last_siri_update_time = 0;
// The visible bus entities
var bus_entities = [];

// end san

function make_car_id()
{
    var text = "";
    var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

    for( var i=0; i < 5; i++ )
        text += possible.charAt(Math.floor(Math.random() * possible.length));

    return text;
}
function xmlToJson(xml) 
{

	// Create the return object
	var obj = {};

	if (xml.nodeType == 1) { // element
		// do attributes
		if (xml.attributes.length > 0) {
		obj["@attributes"] = {};
			for (var j = 0; j < xml.attributes.length; j++) {
				var attribute = xml.attributes.item(j);
				obj["@attributes"][attribute.nodeName] = attribute.nodeValue;
			}
		}
	} else if (xml.nodeType == 3) { // text
		obj = xml.nodeValue;
	}

	// do children
	if (xml.hasChildNodes()) {
		for(var i = 0; i < xml.childNodes.length; i++) {
			var item = xml.childNodes.item(i);
			var nodeName = item.nodeName;
			if (typeof(obj[nodeName]) == "undefined") {
				obj[nodeName] = xmlToJson(item);
			} else {
				if (typeof(obj[nodeName].push) == "undefined") {
					var old = obj[nodeName];
					obj[nodeName] = [];
					obj[nodeName].push(old);
				}
				obj[nodeName].push(xmlToJson(item));
			}
		}
	}
	return obj;
}

var running_busses = [];

function addCar(object, x, y, z, s) {
	console.log("Add car");

	object.root.position.set(x, y, z);
	Tundra.renderer.scene.add(object.root); // add object to the Meshmoon scene

	object.root.castShadow = true;
	object.root.receiveShadow = true;
}

var highlighted_route;
function check_new_buses()
{
	link = "12".charAt(Math.floor(Math.random() * 2));
	link = "http://localhost/oulunbussyviz/index_demo_" + link + ".php";
	//link = "http://localhost/oulunbussyviz/index_demo_1.php";
	$.ajax({
		type: "GET",
		url: link,
		cache: false,
		dataType: "xml",
		success: function(xml) {
			busses_data = xmlToJson(xml);
			bus_details = [];
			
			
			if (busses_data.busses && busses_data.busses.bus_detail)
			{
				if (typeof busses_data.busses.bus_detail.shape !== 'undefined')
				{
					bus_details.push(busses_data.busses.bus_detail);
				}
				else
				{
					bus_details = busses_data.busses.bus_detail;
				}
				for (i=0; i<bus_details.length; i++)
				{
					// create new bus
					new_bus = new THREE.Car();
					bus_id = make_car_id();
					new_bus.id = bus_id;
					new_bus.modelScale = 2; // size of the car
					new_bus.backWheelOffset = 0.02;
					new_bus.MAX_SPEED = 0.9; //25
					new_bus.MAX_REVERSE_SPEED = -0.5; //-15
					new_bus.FRONT_ACCELERATION = 0.4; //12
					new_bus.BACK_ACCELERATION = 0.5; //15
					new_bus.WHEEL_ANGULAR_ACCELERATION = 1; //1.5
					new_bus.FRONT_DECCELERATION = 0.5 //10
					new_bus.WHEEL_ANGULAR_DECCELERATION = 1; //1.0
					new_bus.STEERING_RADIUS_RATIO = 0.23; //0.23
					running_time = parseFloat(bus_details[i].shape[0]['departure_number_time']['#text']);
					distance = 0;
					new_bus.trip_details.push({ lat: parseFloat(bus_details[i].shape[0]['shape_pt_lat']['#text']), 
												lon: parseFloat(bus_details[i].shape[0]['shape_pt_lon']['#text']),
												speed: 0});
					shapes_to_bus_stop = [];
					for (j=1; j<bus_details[i].shape.length; j++)
					{
						small_distance = Math.sqrt(Math.pow(parseFloat(bus_details[i].shape[j]['shape_pt_lat']['#text'])-parseFloat(bus_details[i].shape[j-1]['shape_pt_lat']['#text']), 2) + Math.pow(parseFloat(bus_details[i].shape[j]['shape_pt_lon']['#text'])-parseFloat(bus_details[i].shape[j-1]['shape_pt_lon']['#text']), 2));
						distance += small_distance;
						if (bus_details[i].shape[j]['stop_id'])
						{
							speed = distance/(parseFloat(bus_details[i].shape[j]['departure_number_time']['#text']) - running_time);
							for (k=0; k<shapes_to_bus_stop.length; k++)
							{
								shapes_to_bus_stop[k].speed = speed;
								shapes_to_bus_stop[k].time_to_go = (shapes_to_bus_stop[k].time_to_go/speed)*1000;
								new_bus.trip_details.push(shapes_to_bus_stop[k]);
							}
							shapes_to_bus_stop = [];
							distance = 0;
							running_time = parseFloat(bus_details[i].shape[j]['departure_number_time']['#text']);
						}
						
						shapes_to_bus_stop.push({ 	lat: parseFloat(bus_details[i].shape[j]['shape_pt_lat']['#text']), 
													lon: parseFloat(bus_details[i].shape[j]['shape_pt_lon']['#text']),
													speed: 0,
													distance: small_distance,
													time_to_go: 0,
													tween : null});
					}
					for (j=1; j<new_bus.trip_details.length; j++)
					{
						old_position = Tundra.plugins.meshmoonGeo.coordinates.latLonToWorldPosition(new_bus.trip_details[j-1].lat, new_bus.trip_details[j-1].lon);
						new_position = Tundra.plugins.meshmoonGeo.coordinates.latLonToWorldPosition(new_bus.trip_details[j].lat, new_bus.trip_details[j].lon);
						
						tween = new TWEEN.Tween({ x: old_position.x, z: old_position.z })
						.to({x: new_position.x, z: new_position.z}, new_bus.trip_details[j].time_to_go)
						.easing(TWEEN.Easing.Linear.None)
						.onUpdate(function()
						{
							//console.log('moving', this.x, this.z);
							new_bus.root.translateX(this.x);
							new_bus.root.translateZ(this.z);
						});
						
						new_bus.trip_details[j].tween = tween;
						if (j>1)
							new_bus.trip_details[j-1].tween.chain(new_bus.trip_details[j].tween);
					}
					drawHighlightedRoute(new_bus.trip_details);
					
					// add new bus to map
					
					new_bus.loadPartsJSON("../applications/delta.git/GreenCar.js", "../applications/delta.git/GreenCar.js");
					
					new_bus.callback = function(object) {
						var pos = Tundra.plugins.meshmoonGeo.coordinates.latLonToWorldPosition(object.trip_details[0].lat, object.trip_details[0].lon); //first position of the car
						var new_post = Tundra.plugins.meshmoonGeo.coordinates.latLonToWorldPosition(64.992033, 25.559772);
						
						addCar(object, pos.x, 0, pos.z, 1); //10
						object.trip_details[1].tween.start();
					};
					
					running_busses[bus_id] = new_bus;
				}
				
				
			}
		}
	});
	updated_time++;
	//if (updated_time <= 3)
	//	setTimeout(check_new_buses, 5000);
}

function drawHighlightedBusStops (coordinates)
{
	// TODO
	// get actual coordinates...
	if ( null == coordinates) {
		coordinates = [ [65.015709,25.470789], [65.016709,25.470089], [65.017709,25.471789], [65.016709,25.472789] ];
	}

	// Remove the previous stops
	if (null != highlighted_bus_stops)
	{
		for (var i = 0; i < highlighted_bus_stops.length; i++)
		{
			Tundra.renderer.scene.remove (highlighted_bus_stops[i]);
		}
		highlighted_bus_stops = null;
	}
	highlighted_bus_stops = [];

	for (var k = 0; k < coordinates.length; k++)
	{
		highlighted_bus_stops[k] = Tundra.scene.createLocalEntity(["Name", "Placeable", "Billboard"]);
		var lat = parseFloat(coordinates[k]['stop_lat']['#text']);
		var lon = parseFloat(coordinates[k]['stop_lon']['#text']);
		//console.log('bus stop', lat, lon);
		var pos = Tundra.plugins.meshmoonGeo.coordinates.latLonToWorldPosition(lat, lon);
		highlighted_bus_stops[k].component("Billboard").height = 150.0;
		highlighted_bus_stops[k].component("Billboard").width = 100.0;
		highlighted_bus_stops[k].component("Placeable").setPosition(pos.x, 0, pos.z);
		highlighted_bus_stops[k].component("Billboard").materialRef = "https://slack-files.com/files-tmb/T0645GZNK-F0692CJ5S-c7157c1114/google-map-icon-marker_360.png";
	}
	console.log('end bus stops');
}

function get_bus_stops()
{
	$.ajax({
		type: "GET",
		url: "http://localhost/oulunbussyviz/stops.php",
		cache: false,
		dataType: "xml",
		success: function(xml) {
			stops_data = xmlToJson(xml);
			bus_details = [];
			console.log(stops_data);
			drawHighlightedBusStops(stops_data.bus_stops.stop);
		}
	});
	
	
}

function drawHighlightedRoute(coordinates)
{
	// TODO
	// get actual coordinates...
	if ( null == coordinates) {
		coordinates = [ {lat: 65.015709, lon: 25.470789}, {lat: 65.016709,lon: 25.470089}, {lat: 65.017709,lon: 25.471789}, {lat: 65.016709,lon: 25.472789} ];
	}

	// Remove the previous route
	Tundra.renderer.scene.remove( this.highlighted_route );
	
	var line_material = new THREE.LineBasicMaterial({
		color: 0x00ff00,
		linewidth: 5
		});

	var line_geometry = new THREE.Geometry();
	for (var i = 0; i < coordinates.length; i++) {
		var lat = coordinates[i].lat;
		var lon = coordinates[i].lon;
		var pos = Tundra.plugins.meshmoonGeo.coordinates.latLonToWorldPosition(lat, lon);
		pos.y = 0;
		line_geometry.vertices.push(pos);
	}

	var line = new THREE.Line( line_geometry, line_material );
	this.highlighted_route = line;
	Tundra.renderer.scene.add( this.highlighted_route );
}

var OulubusvizHandler = IApplication.$extend(
{
	
	
	parse_coord: function(str)
	{
		var coordArray = str.split(' ');
		var lat = parseFloat(coordArray[1]);
		var lon = parseFloat(coordArray[0]);
		
		var coord = {};
		if (!isNaN(lat))
			coord.lat = lat;
		if (!isNaN(lon))
			coord.lon = lon;
		
		return coord;
	},
	
	
	
	
    __init__ : function()
    {
        this.$super("Oulubusviz");

        this.timing = new AsyncHelper(this.name, this);
        this.state =
        {
            camera : {}
        };
		

        // Monitor active camera change
        var activeCamera = Tundra.renderer.activeCameraEntity();
        if (activeCamera != null && activeCamera.camera != null)
            this.onActiveCameraChanged(activeCamera.camera);

        this.subscribeEvent(Tundra.renderer.onActiveCameraChanged(this, this.onActiveCameraChanged));

        // Run RTS camera application
        this.rts = {};
        this.rts.ent = Tundra.client.runApplication("RTS", "meshmoon-applications://meshmoon/rts-camera/rts-camera.webrocketjs");
        this.rts.ent.script.onScriptStarted(function(entity, component, scriptAsset, app) {
            this.rts.app = app;
        }.bind(this));

        // You can turn on debugging to see more internals
        //Tundra.plugins.meshmoonGeo.config.debug = true; // and/or
        //Tundra.plugins.meshmoonGeo.config.debugVolume = true;
        
        /* Run Meshmoon GEO at Oulu city center
           You can change this coordinate to be anywhere in the world
           and Meshmoon GEO will do its best to visualize the location. */
        Tundra.plugins.meshmoonGeo.start({
            lon : my_lon,
            lat : my_lat
        });
		
		IApplication.loadDependencies(this,
			"Car.js"
		).done(function()
		{
			this.onDependenciesLoaded();
		}.bind(this));
		
		
		
		// begin thang
		// check_new_buses();
		get_bus_stops();
		// end thang

		// begin samuli
        // TODO : Add Oulu data
        $.getJSON("http://data.itsfactory.fi/siriaccess/vm/json", this.onBusAssetTransferCompleted);
		// end samuli

		// begin san
        //this.drawHighlightedBusStops(null);
		// end san

        // Setup default environment
        Tundra.plugins.meshmoonGeo.setupEnvironment();
        // Connect the prerender function
        Tundra.frame.onPreRender(this, this.onPreRender);
    },
	
	onDependenciesLoaded : function()
	{
		//billboard
		//this.ent = Tundra.scene.createLocalEntity(["Name", "Placeable", "Billboard"]);
		/*this.my_entity = Tundra.scene.createLocalEntity(["Name", "Placeable", "Billboard"]);
        // ent.component("Billboard"
        this.my_entity.component("Name").value = "test_billboard";
        //ent.component("Placeable").transform.pos = Tundra.plugins.meshmoonGeo.coordinates.latLonToWorldPosition(65.013439, 25.466228);
        var poz = Tundra.plugins.meshmoonGeo.coordinates.latLonToWorldPosition(65.013439, 25.466228);
        this.my_entity.component("Billboard").height = 150.0;
        this.my_entity.component("Billboard").width = 200.0;
        this.my_entity.component("Placeable").setPosition(poz.x, 150.0, poz.z);
        this.my_entity.component("Billboard").materialRef = "https://cdn2.colorlib.com/wp/wp-content/uploads/sites/2/2014/02/Olympic-logo.png";
		this.asd = 65.013439;*/
		
		// Get the camera XML file and assign callback function 

		//

		Tundra.frame.onUpdate(this, this.onFrameUpdate);
		Tundra.frame.onPreRender(this, this.onPreRender);
		
		this.subscribeEvent(Tundra.input.onMousePress(this, this.onMousePress));
		
        // Setup default environment
        Tundra.plugins.meshmoonGeo.setupEnvironment();
		
		
    },

    onPreRender : function()
    {
        /*var pos = this.my_entity.component("Placeable").transform.pos;
        this.my_entity.component("Placeable").setPosition(pos.x + 0.1, pos.y, pos.z);*/

        // Update the bus positions
        var d = new Date();
        var delta_time = d.getTime() - last_siri_update_time;
        if (delta_time > siri_update_interval)
        {
            last_siri_update_time = d.getTime();
            $.getJSON("http://data.itsfactory.fi/siriaccess/vm/json", this.onBusAssetTransferCompleted);
        }
    },

    onActiveCameraChanged : function(activeCameraComponent, prevCameraComponent)
    {
        var cameraName = (activeCameraComponent.parentEntity ? activeCameraComponent.parentEntity.name : "");
        if (cameraName === "" || !cameraName)
            return;

        // Adjust far plane to handle big scene for Meshmoon GEO functionality
        this.camera = activeCameraComponent.parentEntity;
        this.camera.camera.farPlane = 1000000;

        this.log.debug("Active camera changed", this.camera.name);

        // If RTS camera execute configuration
        if (this.camera.name === "MeshmoonRtsCamera" && this.state.camera.configured === undefined)
        {
            this.state.camera.configured = true;
            this.timing.async("rts.config", function() {
                this.camera.exec(EntityAction.Local, "SetRotation", { x : -40, y : 0, z : 0 });
                this.camera.exec(EntityAction.Local, "SetDistance", 3000);
                this.camera.exec(EntityAction.Local, "SetMinDistance", 200);
                this.camera.exec(EntityAction.Local, "SetMaxDistance", this.camera.camera.farPlane * 0.4);
            }, 100);
        }
    },

    /** 
        Script destroy/unload handler. Called automatically 
        by the framework when the application is closed.
    */
    onScriptDestroyed : function()
    {
        Tundra.plugins.meshmoonGeo.stop();
    },
	
	// begin thang
	
	// end thang

	// begin samuli
	onBusAssetTransferCompleted: function(data)
    {
        var items = data["Siri"]["ServiceDelivery"]["VehicleMonitoringDelivery"][0]["VehicleActivity"];
        //console.log(items);
        //var jsMap = JSON.parse(items);
        
        //var pos = Tundra.plugins.meshmoonGeo.coordinates.latLonToWorldPosition(my_lat, my_lon);
        
        
        if (items)
        {
            // Remove the previous busses from the scene
            if (null != bus_entities)
            {
                for (var a = 0; a < bus_entities.length; a++)
                {
                    if (null != bus_entities[a])
                    {
                        Tundra.scene.removeEntity(bus_entities[a].id);
                    }
                }
                bus_entities = null;
            }
            bus_entities = [];
        
            //var items = obj;
            for (var i = 0; i < items.length; i++)
            {
                var oneItem = items[i];
                // Prevent busses with empty names
                if(oneItem["MonitoredVehicleJourney"]["VehicleRef"]["value"].length > 0)
                {
                    var bus_coord = oneItem["MonitoredVehicleJourney"]["VehicleLocation"];
                    
                    var bus_pos = Tundra.plugins.meshmoonGeo.coordinates.latLonToWorldPosition(parseFloat(bus_coord["Latitude"]), parseFloat(bus_coord["Longitude"]));
                    //console.log(bus_pos);
     
                    bus_entities[i] = Tundra.scene.createLocalEntity(["Name", "Billboard", "Placeable"]);
     
                    bus_entities[i].name = oneItem["MonitoredVehicleJourney"]["VehicleRef"]["value"];
                    bus_entities[i].placeable.setPosition(new THREE.Vector3(bus_pos.x, 0, bus_pos.z));
                    bus_entities[i].billboard.materialRef = "https://slack-files.com/files-tmb/T0645GZNK-F064F7G3C-67e9ee3b81/funny_bus_text_1024.png";
                    bus_entities[i].billboard.height = 150.0;
                    bus_entities[i].billboard.width = 150.0;
                }
            }
        }
	},
	// end samuli

	// begin san
	

	// end san

    // ref: http://stackoverflow.com/a/1293163/2343
    // This will parse a delimited string into an array of
    // arrays. The default delimiter is the comma, but this
    // can be overriden in the second argument.
    CSVToArray : function( strData, strDelimiter ){
        // Check to see if the delimiter is defined. If not,
        // then default to comma.
        strDelimiter = (strDelimiter || ",");

        // Create a regular expression to parse the CSV values.
        var objPattern = new RegExp(
            (
                // Delimiters.
                "(\\" + strDelimiter + "|\\r?\\n|\\r|^)" +
                // Quoted fields.
                "(?:\"([^\"]*(?:\"\"[^\"]*)*)\"|" +
                // Standard fields.
                "([^\"\\" + strDelimiter + "\\r\\n]*))"
            ),
            "gi"
            );

        // Create an array to hold our data. Give the array
        // a default empty first row.
        var arrData = [[]];

        // Create an array to hold our individual pattern
        // matching groups.
        var arrMatches = null;

        // Keep looping over the regular expression matches
        // until we can no longer find a match.
        while (arrMatches = objPattern.exec( strData )){
            // Get the delimiter that was found.
            var strMatchedDelimiter = arrMatches[ 1 ];

            // Check to see if the given delimiter has a length
            // (is not the start of string) and if it matches
            // field delimiter. If id does not, then we know
            // that this delimiter is a row delimiter.
            if (
                strMatchedDelimiter.length &&
                strMatchedDelimiter !== strDelimiter
                ){
                // Since we have reached a new row of data,
                // add an empty row to our data array.
                arrData.push( [] );
            }

            var strMatchedValue;
            // Now that we have our delimiter out of the way,
            // let's check to see which kind of value we
            // captured (quoted or unquoted).
            if (arrMatches[ 2 ]){
                // We found a quoted value. When we capture
                // this value, unescape any double quotes.
                strMatchedValue = arrMatches[ 2 ].replace(
                    new RegExp( "\"\"", "g" ),
                    "\""
                    );
            } else {
                // We found a non-quoted value.
                strMatchedValue = arrMatches[ 3 ];
            }

            // Now that we have our value string, let's add
            // it to the data array.
            arrData[ arrData.length - 1 ].push( strMatchedValue );
        }

        // Return the parsed data.
        return( arrData );
    }
});

// Start the application by instantiating it
var oulubusvizHandler = new OulubusvizHandler();

