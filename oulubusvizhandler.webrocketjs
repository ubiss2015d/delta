// Tampere coordinates
var my_lat = 61.4981145;
var my_lon = 23.761476;
var asd = my_lat;

var my_entity = Tundra.scene.createLocalEntity(["Name", "Placeable", "Billboard"]);

var OulubusvizHandler = IApplication.$extend(
{
	
	addCar:function (object, x, y, z, s) {
		console.log("Add car");

		object.root.position.set(x, y, z);
		Tundra.renderer.scene.add(object.root); // add object to the Meshmoon scene

		object.root.castShadow = true;
		object.root.receiveShadow = true;
	},
	
	
    __init__ : function()
    {
        this.$super("Oulubusviz");

        this.timing = new AsyncHelper(this.name, this);
        this.state =
        {
            camera : {}
        };

        // Monitor active camera change
        var activeCamera = Tundra.renderer.activeCameraEntity();
        if (activeCamera != null && activeCamera.camera != null)
            this.onActiveCameraChanged(activeCamera.camera);

        this.subscribeEvent(Tundra.renderer.onActiveCameraChanged(this, this.onActiveCameraChanged));

        // Run RTS camera application
        this.rts = {};
        this.rts.ent = Tundra.client.runApplication("RTS", "meshmoon-applications://meshmoon/rts-camera/rts-camera.webrocketjs");
        this.rts.ent.script.onScriptStarted(function(entity, component, scriptAsset, app) {
            this.rts.app = app;
        }.bind(this));

        // You can turn on debugging to see more internals
        //Tundra.plugins.meshmoonGeo.config.debug = true; // and/or
        //Tundra.plugins.meshmoonGeo.config.debugVolume = true;
        
        /* Run Meshmoon GEO at Oulu city center
           You can change this coordinate to be anywhere in the world
           and Meshmoon GEO will do its best to visualize the location. */
        Tundra.plugins.meshmoonGeo.start({
            lon : my_lon,
            lat : my_lat
        });
		
		IApplication.loadDependencies(this,
			"Car.js"
		).done(function()
		{
			this.onDependenciesLoaded();
		}.bind(this));

        // Setup default environment
        Tundra.plugins.meshmoonGeo.setupEnvironment();
        // Connect the prerender function
        Tundra.frame.onPreRender(this, this.onPreRender);
        
        
        /*
        // TEST BILLBOARD
       var bb_pos = Tundra.plugins.meshmoonGeo.coordinates.latLonToWorldPosition(my_lat, my_lon);
        
        
        my_entity.name = "Test_billboard";
        
        my_entity.placeable.setPosition(new THREE.Vector3(bb_pos.x, 300.0, bb_pos.z));
        //my_entity.placeable.setScale(new THREE.Vector3(1, 1, 1));
        my_entity.billboard.materialRef = "https://cdn2.colorlib.com/wp/wp-content/uploads/sites/2/2014/02/Olympic-logo.png";
        my_entity.billboard.height = 200.0;
        my_entity.billboard.width = 300.0;
    
        Tundra.frame.onPreRender(this, this.onPreRender);
        // !TEST BILLBOARD
        */
        
        
        
        // Bus locations
        var transfer = Tundra.asset.requestAsset("http://data.itsfactory.fi/siriaccess/vm/json", ".json");
        
        //console.log(transfer);
        if (transfer != null) {
            transfer.onCompleted(this, this.onBusAssetTransferCompleted);
        } 
        else 
        {
            console.log("transfer == null");
        }
        
        
        
    },
    
    onBusAssetTransferCompleted: function(asset)
    {
        var items = asset.data["Siri"]["ServiceDelivery"]["VehicleMonitoringDelivery"][0]["VehicleActivity"];
        //console.log(items);
        //var jsMap = JSON.parse(items);
        
        //var pos = Tundra.plugins.meshmoonGeo.coordinates.latLonToWorldPosition(my_lat, my_lon);
        
        
        if (items)
        {
            //var items = obj;
            for (var i = 0; i < 5; i++)
            {
                var oneItem = items[i];
  
                var bus_coord = oneItem["MonitoredVehicleJourney"]["VehicleLocation"];
                console.log(bus_coord);
                
                var bus_pos = Tundra.plugins.meshmoonGeo.coordinates.latLonToWorldPosition(parseInt(bus_coord["Latitude"]), parseInt(bus_coord["Longitude"]));
                console.log(bus_pos);
 
                var bus_entity = Tundra.scene.createLocalEntity(["Name", "Billboard", "Placeable"]);
 
                bus_entity.name = "ent_"+i;
                bus_entity.placeable.setPosition(new THREE.Vector3(bus_pos.x, 150.0, bus_pos.z));
                bus_entity.billboard.materialRef = "https://dl.dropboxusercontent.com/u/3127934/oulubusviz/bus.png";
                bus_entity.billboard.height = 150.0;
                bus_entity.billboard.width = 150.0;
                
                console.log(bus_entity);
 
            }
        }
        
    },
    
    
	
	onDependenciesLoaded : function()
	{
		/*
        //billboard
		this.ent = Tundra.scene.createLocalEntity(["Name", "Placeable", "Billboard"]);
        // ent.component("Billboard"
        this.ent.component("Name").value = "test_billboard";
        //ent.component("Placeable").transform.pos = Tundra.plugins.meshmoonGeo.coordinates.latLonToWorldPosition(65.013439, 25.466228);
        var poz = Tundra.plugins.meshmoonGeo.coordinates.latLonToWorldPosition(65.013439, 25.466228);
        this.ent.component("Billboard").height = 150.0;
        this.ent.component("Billboard").width = 150.0;
        this.ent.component("Placeable").setPosition(poz.x, 150.0, poz.z);
        this.ent.component("Billboard").materialRef = "https://cdn2.colorlib.com/wp/wp-content/uploads/sites/2/2014/02/Olympic-logo.png";
		this.asd = 65.013439;
        */
		
		// Get the camera XML file and assign callback function 
		this.car = new THREE.Car();
		console.log("The CAR:", this.car);

		this.car.modelScale = 2; // size of the car
		this.car.backWheelOffset = 0.02;

		this.car.MAX_SPEED = 0.9; //25
		this.car.MAX_REVERSE_SPEED = -0.5; //-15
		this.car.FRONT_ACCELERATION = 0.4; //12
		this.car.BACK_ACCELERATION = 0.5; //15

		this.car.WHEEL_ANGULAR_ACCELERATION = 1; //1.5

		this.car.FRONT_DECCELERATION = 0.5 //10
		this.car.WHEEL_ANGULAR_DECCELERATION = 1; //1.0

		this.car.STEERING_RADIUS_RATIO = 0.23; //0.23
		
		this.car.carOrientation = 120;
		this.car.currentLat = 65.015709;
		this.car.currentLon = 25.470789;

		this.car.callback = function(object) {
			var pos = Tundra.plugins.meshmoonGeo.coordinates.latLonToWorldPosition(this.car.currentLat, this.car.currentLon); //first position of the car
			var direction = Tundra.plugins.meshmoonGeo.coordinates.latLonToWorldPosition(65.016475, 25.469689);
			this.car.root.lookAt(new THREE.Vector3( direction.x, 0, direction.z ));
			this.addCar(object, pos.x, 0, pos.z, 1); //10
		}.bind(this);

		this.car.loadPartsJSON("deps/GreenCar.js", "deps/GreenCar.js");
		console.log('11111111111');
		//console.log(controlsCar.moveForward);
		//controlsCar.moveForward = true;
		Tundra.frame.onUpdate(this, this.onFrameUpdate);
		Tundra.frame.onPreRender(this, this.onPreRender);
		
		this.subscribeEvent(Tundra.input.onMousePress(this, this.onMousePress));
		
        // Setup default environment
        Tundra.plugins.meshmoonGeo.setupEnvironment();
		
		
    },

    onPreRender : function()
    {
    
    },

    onActiveCameraChanged : function(activeCameraComponent, prevCameraComponent)
    {
        var cameraName = (activeCameraComponent.parentEntity ? activeCameraComponent.parentEntity.name : "");
        if (cameraName === "" || !cameraName)
            return;

        // Adjust far plane to handle big scene for Meshmoon GEO functionality
        this.camera = activeCameraComponent.parentEntity;
        this.camera.camera.farPlane = 1000000;

        this.log.debug("Active camera changed", this.camera.name);

        // If RTS camera execute configuration
        if (this.camera.name === "MeshmoonRtsCamera" && this.state.camera.configured === undefined)
        {
            this.state.camera.configured = true;
            this.timing.async("rts.config", function() {
                this.camera.exec(EntityAction.Local, "SetRotation", { x : -40, y : 0, z : 0 });
                this.camera.exec(EntityAction.Local, "SetDistance", 3000);
                this.camera.exec(EntityAction.Local, "SetMinDistance", 200);
                this.camera.exec(EntityAction.Local, "SetMaxDistance", this.camera.camera.farPlane * 0.4);
            }, 100);
        }
    },

    /** 
        Script destroy/unload handler. Called automatically 
        by the framework when the application is closed.
    */
    onScriptDestroyed : function()
    {
        Tundra.plugins.meshmoonGeo.stop();
    },

    // ref: http://stackoverflow.com/a/1293163/2343
    // This will parse a delimited string into an array of
    // arrays. The default delimiter is the comma, but this
    // can be overriden in the second argument.
    CSVToArray : function( strData, strDelimiter ){
        // Check to see if the delimiter is defined. If not,
        // then default to comma.
        strDelimiter = (strDelimiter || ",");

        // Create a regular expression to parse the CSV values.
        var objPattern = new RegExp(
            (
                // Delimiters.
                "(\\" + strDelimiter + "|\\r?\\n|\\r|^)" +
                // Quoted fields.
                "(?:\"([^\"]*(?:\"\"[^\"]*)*)\"|" +
                // Standard fields.
                "([^\"\\" + strDelimiter + "\\r\\n]*))"
            ),
            "gi"
            );

        // Create an array to hold our data. Give the array
        // a default empty first row.
        var arrData = [[]];

        // Create an array to hold our individual pattern
        // matching groups.
        var arrMatches = null;

        // Keep looping over the regular expression matches
        // until we can no longer find a match.
        while (arrMatches = objPattern.exec( strData )){
            // Get the delimiter that was found.
            var strMatchedDelimiter = arrMatches[ 1 ];

            // Check to see if the given delimiter has a length
            // (is not the start of string) and if it matches
            // field delimiter. If id does not, then we know
            // that this delimiter is a row delimiter.
            if (
                strMatchedDelimiter.length &&
                strMatchedDelimiter !== strDelimiter
                ){
                // Since we have reached a new row of data,
                // add an empty row to our data array.
                arrData.push( [] );
            }

            var strMatchedValue;
            // Now that we have our delimiter out of the way,
            // let's check to see which kind of value we
            // captured (quoted or unquoted).
            if (arrMatches[ 2 ]){
                // We found a quoted value. When we capture
                // this value, unescape any double quotes.
                strMatchedValue = arrMatches[ 2 ].replace(
                    new RegExp( "\"\"", "g" ),
                    "\""
                    );
            } else {
                // We found a non-quoted value.
                strMatchedValue = arrMatches[ 3 ];
            }

            // Now that we have our value string, let's add
            // it to the data array.
            arrData[ arrData.length - 1 ].push( strMatchedValue );
        }

        // Return the parsed data.
        return( arrData );
    }
});

// Start the application by instantiating it
var oulubusvizHandler = new OulubusvizHandler();

